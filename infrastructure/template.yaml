AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Security Design Assistant - Serverless Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  GeminiApiKey:
    Type: String
    NoEcho: true
    Description: Gemini API key for AI processing
  
  # Environment-specific Lambda configuration
  LambdaMemorySize:
    Type: Number
    Default: 1024
    Description: Lambda memory size in MB
  
  LambdaTimeout:
    Type: Number
    Default: 900
    Description: Lambda timeout in seconds
  
  # Pre/Post traffic hook configuration
  TrafficShiftingTimeoutInMinutes:
    Type: Number
    Default: 5
    Description: Maximum time for traffic shifting
  
  TrafficShiftingPercentage:
    Type: Number
    Default: 10
    Description: Percentage of traffic to shift every minute

Globals:
  Function:
    Runtime: python3.11
    Architectures:
      - arm64  # Use ARM64 Graviton2 for 20% cost savings
    MemorySize: !Ref LambdaMemorySize
    Timeout: !Ref LambdaTimeout
    Tracing: Active  # Enable X-Ray tracing for all functions
    Layers:
      - !Ref DependenciesLayer
    Environment:
      Variables:
        STORAGE_MODE: aws
        S3_BUCKET: !Ref S3Bucket
        DYNAMODB_TABLE: !Ref JobsTable
        SQS_QUEUE_URL: !Ref ProcessingQueue
        GEMINI_API_KEY_PARAMETER: !Ref GeminiApiKeyParameter
        ENVIRONMENT: !Ref Environment
        SNS_ALERT_TOPIC_ARN: !Ref AlertTopic
        STACK_NAME: !Sub "${AWS::StackName}"

Resources:
  # Lambda Layer for shared dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'security-assistant-dependencies-${Environment}'
      Description: 'Shared dependencies for Security Assistant Lambda functions'
      ContentUri: ../layer/
      CompatibleRuntimes:
        - python3.11
      CompatibleArchitectures:
        - arm64
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.11

  # Pre-traffic hook function for deployment validation
  PreTrafficHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-pre-traffic-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.pre_traffic_hook.handler
      Runtime: python3.11
      MemorySize: 512
      Timeout: 300
      Layers: []  # Don't use the shared layer to avoid circular dependency
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: '*'
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: 
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-api-${Environment}'
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-worker-${Environment}'
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-status-${Environment}'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: !GetAtt JobsTable.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource: 
                - !Sub '${S3Bucket}/*'
                - !GetAtt S3Bucket.Arn
            - Effect: Allow
              Action:
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt ProcessingQueue.Arn
      Environment:
        Variables:
          STORAGE_MODE: aws
          S3_BUCKET: !Ref S3Bucket
          DYNAMODB_TABLE: !Ref JobsTable
          SQS_QUEUE_URL: !Ref ProcessingQueue
          ENVIRONMENT: !Ref Environment

  # Post-traffic hook function for deployment validation
  PostTrafficHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-post-traffic-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.post_traffic_hook.handler
      Runtime: python3.11
      MemorySize: 512
      Timeout: 300
      Layers: []  # Don't use the shared layer to avoid circular dependency
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: '*'
            - Effect: Allow
              Action:
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
              Resource: '*'
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: 
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-api-${Environment}'
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-worker-${Environment}'
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-status-${Environment}'
            - Effect: Allow
              Action:
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
              Resource: 
                - !GetAtt ProcessingQueue.Arn
                - !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          STORAGE_MODE: aws
          ENVIRONMENT: !Ref Environment
          API_FUNCTION_NAME: !Sub 'security-assistant-api-${Environment}'
          WORKER_FUNCTION_NAME: !Sub 'security-assistant-worker-${Environment}'
          STATUS_FUNCTION_NAME: !Sub 'security-assistant-status-${Environment}'
          PROCESSING_QUEUE_URL: !Ref ProcessingQueue
          DLQ_URL: !Ref DeadLetterQueue

  # Parameter Store for sensitive configuration
  GeminiApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/security-assistant/${Environment}/gemini-api-key'
      Type: String
      Value: !Ref GeminiApiKey
      Description: 'Gemini API key for AI processing'
      Tier: Standard

  # IAM Roles with Least Privilege
  ApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SecurityAssistant-ApiLambda-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: ApiLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub '${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt JobsTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt ProcessingQueue.Arn
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Ref GeminiApiKeyParameter

  WorkerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SecurityAssistant-WorkerLambda-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: WorkerLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub '${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt S3Bucket.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: 
                  - !GetAtt JobsTable.Arn
                  - !Sub '${JobsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ProcessingQueue.Arn
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Ref GeminiApiKeyParameter
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  StatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SecurityAssistant-StatusLambda-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: StatusLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: 
                  - !GetAtt JobsTable.Arn
                  - !Sub '${JobsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub '${S3Bucket}/*'
                  - !GetAtt S3Bucket.Arn

  DLQProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SecurityAssistant-DLQProcessorLambda-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: DLQProcessorLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt JobsTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt DeadLetterQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AlertTopic

  WarmerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SecurityAssistant-WarmerLambda-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: WarmerLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-api-${Environment}'
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security-assistant-status-${Environment}'

  # S3 Bucket for file storage
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'security-assistant-files-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 30  # Delete files after 30 days as per AC
      # Enable S3 Transfer Acceleration for faster uploads
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      # Configure Intelligent Tiering for cost optimization
      IntelligentTieringConfigurations:
        - Id: IntelligentTieringConfig
          Status: Enabled
          Prefix: ""  # Apply to all objects
          OptionalFields:
            - BucketKeyEnabled

  # DynamoDB table for job tracking
  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'security-assistant-jobs-${Environment}'
      AttributeDefinitions:
        - AttributeName: 'company#client#job'
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: client_name
          AttributeType: S
        - AttributeName: date_bucket
          AttributeType: S
      KeySchema:
        - AttributeName: 'company#client#job'
          KeyType: HASH
      GlobalSecondaryIndexes:
        # GSI1: StatusDateIndex for querying jobs by status
        - IndexName: StatusDateIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # GSI2: ClientProjectIndex for querying jobs by client
        - IndexName: ClientProjectIndex
          KeySchema:
            - AttributeName: client_name
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # GSI3: DateRangeIndex for querying jobs by date range
        - IndexName: DateRangeIndex
          KeySchema:
            - AttributeName: date_bucket
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST  # On-demand pricing for cost optimization
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Main SQS queue for processing jobs
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'security-assistant-processing-${Environment}'
      VisibilityTimeout: 1800  # 30 minutes (max Lambda duration)
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20  # Long polling enabled for cost optimization
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  # Dead Letter Queue for failed processing jobs
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'security-assistant-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days

  # CloudWatch Alarm for DLQ depth
  DLQDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-dlq-depth-${Environment}'
      AlarmDescription: 'Monitor DLQ depth for failed processing jobs'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      AlarmActions:
        - !Ref AlertTopic

  # Lambda Error Rate Alarms (>10% threshold)
  ApiLambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-api-error-rate-${Environment}'
      AlarmDescription: 'API Lambda error rate exceeds 10%'
      MetricName: ErrorRate
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProcessDrawingApiFunction
      AlarmActions:
        - !Ref AlertTopic

  WorkerLambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-worker-error-rate-${Environment}'
      AlarmDescription: 'Worker Lambda error rate exceeds 10%'
      MetricName: ErrorRate
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProcessDrawingWorkerFunction
      AlarmActions:
        - !Ref AlertTopic

  StatusLambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-status-error-rate-${Environment}'
      AlarmDescription: 'Status Lambda error rate exceeds 10%'
      MetricName: ErrorRate
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetJobStatusFunction
      AlarmActions:
        - !Ref AlertTopic

  # SQS Message Age Alarms (>20 minutes)
  ProcessingQueueMessageAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-queue-message-age-${Environment}'
      AlarmDescription: 'Processing queue message age exceeds 20 minutes'
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1200  # 20 minutes in seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ProcessingQueue.QueueName
      AlarmActions:
        - !Ref AlertTopic

  # Monthly Cost Projection Alarm
  TokenCostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-token-cost-${Environment}'
      AlarmDescription: 'Monthly token cost projection exceeds budget'
      MetricName: EstimatedCost
      Namespace: SecurityAssistant/TokenUsage
      Statistic: Sum
      Period: 86400  # Daily
      EvaluationPeriods: 7  # Check for 7 days
      Threshold: 100.0  # $100 per week threshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Environment
          Value: !Ref Environment
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # API Gateway 5XX Error Rate Alarm
  ApiGateway5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-api-5xx-errors-${Environment}'
      AlarmDescription: 'API Gateway 5XX error rate is high'
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub 'security-assistant-${Environment}'
      AlarmActions:
        - !Ref AlertTopic

  # DynamoDB Throttling Alarm
  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'security-assistant-dynamodb-throttles-${Environment}'
      AlarmDescription: 'DynamoDB throttling detected'
      MetricName: UserErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref JobsTable
      AlarmActions:
        - !Ref AlertTopic

  # Composite Alarm for Cascading Failures
  SystemHealthCompositeAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    Properties:
      AlarmName: !Sub 'security-assistant-system-health-${Environment}'
      AlarmDescription: 'Composite alarm for detecting cascading system failures'
      AlarmRule: !Sub |
        (ALARM(${ApiLambdaErrorRateAlarm}) AND ALARM(${WorkerLambdaErrorRateAlarm})) OR 
        (ALARM(${DLQDepthAlarm}) AND ALARM(${ProcessingQueueMessageAgeAlarm})) OR
        ALARM(${ApiGateway5XXErrorAlarm})
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlertTopic

  # SNS topic for critical alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'security-assistant-alerts-${Environment}'
      DisplayName: 'Security Assistant Critical Alerts'

  # Cost Anomaly Detection
  CostAnomalyDetector:
    Type: AWS::CE::AnomalyDetector
    Properties:
      DetectorName: !Sub 'SecurityAssistant-CostAnomaly-${Environment}'
      MonitorType: DIMENSIONAL
      MonitorSpecification:
        DimensionKey: 'SERVICE'
        DimensionValueRegex: '(AWS Lambda|Amazon API Gateway|Amazon S3|Amazon DynamoDB|Amazon SQS)'
        MatchOptions:
          - EQUALS
      
  CostAnomalySubscription:
    Type: AWS::CE::AnomalySubscription
    Properties:
      SubscriptionName: !Sub 'SecurityAssistant-CostAlerts-${Environment}'
      MonitorArnList:
        - !Ref CostAnomalyDetector
      Subscribers:
        - Type: EMAIL
          Address: 'devops@company.com'  # Replace with actual email
        - Type: SNS
          Address: !Ref AlertTopic
      Frequency: DAILY
      Threshold: 100  # Alert on anomalies >= $100

  # API Gateway for REST API
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'  # Smallest cache size for cost optimization
      MethodSettings:
        - ResourcePath: '/status/*'
          HttpMethod: GET
          CachingEnabled: true
          CacheTtlInSeconds: 300  # 5 minutes cache for status endpoints
          CacheKeyParameters:
            - method.request.path.job_id
        - ResourcePath: '/process-drawing'
          HttpMethod: POST
          CachingEnabled: false  # Don't cache POST requests
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Lambda function for processing drawing uploads (API endpoint)
  ProcessDrawingApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-api-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.process_drawing_api.handler
      MemorySize: 1024
      Timeout: 30
      Role: !GetAtt ApiLambdaRole.Arn
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrencyExecution: 2  # Keep 2 instances warm
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref ApiLambdaErrorRateAlarm
        Hooks:
          PreTraffic: !Ref PreTrafficHookFunction
          PostTraffic: !Ref PostTrafficHookFunction
      Environment:
        Variables:
          STORAGE_MODE: aws
      Events:
        ProcessDrawing:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /process-drawing
            Method: post

  # Lambda function for processing jobs from SQS
  ProcessDrawingWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-worker-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.process_drawing_worker.handler
      MemorySize: 3008  # 3GB for PDF processing
      Timeout: 900     # 15 minutes
      ReservedConcurrentExecutions: 10  # Limit concurrent processing
      Role: !GetAtt WorkerLambdaRole.Arn
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref WorkerLambdaErrorRateAlarm
        Hooks:
          PreTraffic: !Ref PreTrafficHookFunction
          PostTraffic: !Ref PostTrafficHookFunction
      Environment:
        Variables:
          STORAGE_MODE: aws
      Events:
        SQSProcessor:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessingQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0

  # Lambda function for job status endpoint
  GetJobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-status-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.get_job_status.handler
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt StatusLambdaRole.Arn
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref StatusLambdaErrorRateAlarm
        Hooks:
          PreTraffic: !Ref PreTrafficHookFunction
          PostTraffic: !Ref PostTrafficHookFunction
      Environment:
        Variables:
          STORAGE_MODE: aws
      Events:
        GetStatus:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /status/{job_id}
            Method: get

  # Lambda function for processing DLQ messages
  DLQProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-dlq-processor-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.dlq_processor.handler
      MemorySize: 512
      Timeout: 300  # 5 minutes
      Role: !GetAtt DLQProcessorLambdaRole.Arn
      Environment:
        Variables:
          STORAGE_MODE: aws
          SNS_ALERT_TOPIC_ARN: !Ref AlertTopic
      Events:
        DLQProcessor:
          Type: SQS
          Properties:
            Queue: !GetAtt DeadLetterQueue.Arn
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 60

  # Lambda Warmer function to reduce cold starts
  LambdaWarmerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'security-assistant-warmer-${Environment}'
      CodeUri: ../src/
      Handler: lambda_functions.lambda_warmer.handler
      MemorySize: 256  # Minimal memory for warmer
      Timeout: 120    # 2 minutes
      Role: !GetAtt WarmerLambdaRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Events:
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(5 minutes)'  # Warm functions every 5 minutes
            Description: 'Keep critical Lambda functions warm'
            Enabled: true

  # CloudWatch Log Groups with retention
  ProcessDrawingApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/security-assistant-api-${Environment}'
      RetentionInDays: 30

  ProcessDrawingWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/security-assistant-worker-${Environment}'
      RetentionInDays: 30

  GetJobStatusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/security-assistant-status-${Environment}'
      RetentionInDays: 30

  DLQProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/security-assistant-dlq-processor-${Environment}'
      RetentionInDays: 30

  LambdaWarmerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/security-assistant-warmer-${Environment}'
      RetentionInDays: 7  # Short retention for warmer logs

  # CloudWatch Dashboards
  MainDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'SecurityAssistant-Main-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProcessDrawingApiFunction}", { "stat": "Sum" } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProcessDrawingWorkerFunction}", { "stat": "Sum" } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${GetJobStatusFunction}", { "stat": "Sum" } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${DLQProcessorFunction}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "Lambda Invocations",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${ProcessDrawingApiFunction}", { "stat": "Sum" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${ProcessDrawingWorkerFunction}", { "stat": "Sum" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${GetJobStatusFunction}", { "stat": "Sum" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${DLQProcessorFunction}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "Lambda Errors",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfVisibleMessages", "QueueName", "${ProcessingQueue}", { "stat": "Average" } ],
                  [ "AWS/SQS", "ApproximateNumberOfVisibleMessages", "QueueName", "${DeadLetterQueue}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "SQS Queue Depth",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "SecurityAssistant/Pipeline", "ProcessingDuration", "Environment", "${Environment}", "Stage", "pdf_processing", { "stat": "Average" } ],
                  [ "SecurityAssistant/Pipeline", "ProcessingDuration", "Environment", "${Environment}", "Stage", "context_processing", { "stat": "Average" } ],
                  [ "SecurityAssistant/Pipeline", "ProcessingDuration", "Environment", "${Environment}", "Stage", "drawing_analysis", { "stat": "Average" } ],
                  [ "SecurityAssistant/Pipeline", "ProcessingDuration", "Environment", "${Environment}", "Stage", "excel_generation", { "stat": "Average" } ],
                  [ "SecurityAssistant/Pipeline", "ProcessingDuration", "Environment", "${Environment}", "Stage", "evaluation", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "Processing Duration by Stage",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            }
          ]
        }

  HealthMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'SecurityAssistant-Health-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "SecurityAssistant/API", "RequestCount", "Environment", "${Environment}", "Endpoint", "/process-drawing" ],
                  [ "SecurityAssistant/API", "RequestCount", "Environment", "${Environment}", "Endpoint", "/status" ]
                ],
                "view": "singleValue",
                "region": "us-east-1",
                "title": "API Request Counts",
                "period": 3600,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "SecurityAssistant/API", "ResponseTime", "Environment", "${Environment}", "Endpoint", "/process-drawing", { "stat": "Average" } ],
                  [ "SecurityAssistant/API", "ResponseTime", "Environment", "${Environment}", "Endpoint", "/status", { "stat": "Average" } ]
                ],
                "view": "singleValue",
                "region": "us-east-1",
                "title": "Avg Response Time",
                "period": 3600,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "SecurityAssistant/TokenUsage", "TotalTokens", "Environment", "${Environment}", "Model", "gemini-2.0-flash-exp", { "stat": "Sum" } ],
                  [ "SecurityAssistant/TokenUsage", "EstimatedCost", "Environment", "${Environment}", "Model", "gemini-2.0-flash-exp", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "Token Usage & Cost Trends",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            }
          ]
        }

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  S3Bucket:
    Description: 'S3 bucket for file storage'
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  DynamoDBTable:
    Description: 'DynamoDB table for job tracking'
    Value: !Ref JobsTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  SQSQueue:
    Description: 'SQS queue for job processing'
    Value: !Ref ProcessingQueue
    Export:
      Name: !Sub '${AWS::StackName}-SQSQueue'

  DeadLetterQueue:
    Description: 'Dead Letter Queue for failed jobs'
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueue'