name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'eu-west-2'
  STACK_NAME: 'security-assistant'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run unit tests
        env:
          STORAGE_MODE: local
          LOCAL_OUTPUT_DIR: ./local_output
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          pytest tests/unit -v -m unit --cov=src --cov-report=term-missing

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aws-sam-cli
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Build Lambda layer
        run: |
          cd layer
          ./build-layer.sh
          cd ..
      
      - name: Build SAM application
        run: |
          sam build \
            --template infrastructure/template.yaml \
            --use-container
      
      - name: Deploy to production
        run: |
          sam deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --s3-bucket security-assistant-sam-deployments \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              GeminiApiKey=${{ secrets.GEMINI_API_KEY }} \
              Environment=prod \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset
      
      - name: Get stack outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs' \
            --output table
      
      - name: Verify deployment
        run: |
          # Get API Gateway URL from stack outputs
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          # Health check
          curl -f "${API_URL}/health" || exit 1
          echo "âœ… API health check passed"
      
      - name: Create deployment tag
        run: |
          git tag -a "prod-$(date +%Y%m%d-%H%M%S)" -m "Production deployment"
          git push origin --tags