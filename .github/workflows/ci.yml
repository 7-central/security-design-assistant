name: CI - Test and Validate

on:
  pull_request:
    branches: [ main, dev ]

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'eu-west-2'

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy
      
      - name: Run ruff linter
        run: |
          ruff check src/ tests/
      
      # Temporarily disabled mypy - 132 type errors need incremental fixing
      # - name: Run mypy type checker
      #   run: |
      #     mypy src/ --ignore-missing-imports

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run unit tests
        env:
          STORAGE_MODE: local
          LOCAL_OUTPUT_DIR: ./local_output
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          pytest tests/unit -v -m unit --cov=src --cov-report=term-missing
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage

  e2e-tests:
    name: E2E Tests - ${{ matrix.test-group }}
    runs-on: ubuntu-latest
    needs: [unit-tests]  # Only depend on unit tests, not lint
    timeout-minutes: 8   # Fail if tests take longer than 8 minutes
    strategy:
      fail-fast: false  # Don't cancel other tests if one fails
      matrix:
        test-group:
          - "api"           # test_api_e2e.py (4-5m with context)
          - "pipeline"      # test_full_pipeline_e2e.py (3-4m with Judge)
          - "error"         # test_error_handling_e2e.py (30s)
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Run E2E tests
        env:
          STORAGE_MODE: aws
          ENV: dev
          AWS_REGION: ${{ env.AWS_REGION }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Run specific test group based on matrix with appropriate timeouts
          case "${{ matrix.test-group }}" in
            api)
              # API tests can take 4-5 minutes with context processing
              pytest tests/e2e/test_api_e2e.py -v -m e2e --tb=short --timeout=300
              ;;
            pipeline)
              # Pipeline tests can take 5-6 minutes with Judge evaluation
              pytest tests/e2e/test_full_pipeline_e2e.py -v -m e2e --tb=short --timeout=360
              ;;
            error)
              # Error handling tests are quick, under 1 minute
              pytest tests/e2e/test_error_handling_e2e.py -v -m e2e --tb=short --timeout=60
              ;;
          esac
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.test-group }}
          path: |
            .pytest_cache/
            test-results/

  validate-infrastructure:
    name: Validate SAM Templates
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
      
      - name: Validate production template
        run: |
          sam validate --template infrastructure/template.yaml --region ${{ env.AWS_REGION }}
      
      - name: Validate dev template
        run: |
          sam validate --template infrastructure/dev-template.yaml --region ${{ env.AWS_REGION }}

